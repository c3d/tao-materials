// *****************************************************************************
// materials.tbl                                                   Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "Materials" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011,2013, Catherine Burvelle <catherine@taodyne.com>
// (C) 2011-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2011-2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2011-2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

// ----------------------------------------------------------------------------
//   PLASTIC MATERIAL
// ----------------------------------------------------------------------------

PREFIX(PlasticMaterial,  tree, "plastic",
       PARM(a, real, ),
       return plastic(self, a),
       GROUP(module.Materials)
       SYNOPSIS("Apply a sort of plastic material")
       DESCRIPTION("Apply a sort of plastic material"))

// ----------------------------------------------------------------------------
//   MARBLE MATERIAL
// ----------------------------------------------------------------------------

PREFIX(MarbleSFirstColor,  tree, "marble_first_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return marble_first_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the first marble color.")
       DESCRIPTION("Set the first marble color."
                   "It corresponds to the main color of the marble."))

PREFIX(MarbleSecondColor,  tree, "marble_second_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return marble_second_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the second marble color.")
       DESCRIPTION("Set the second marble color."
                   "It corresponds to the color of the veining."))

PREFIX(Marble,  tree, "marble_material",
       PARM(unit, integer, )
       PARM(scale, real, ),
       return marble(self, unit, scale),
       GROUP(module.Materials)
       SYNOPSIS("Apply a sort of marble material.")
       DESCRIPTION("Apply a sort of marble material."))

// ----------------------------------------------------------------------------
//   GRANITE MATERIAL
// ----------------------------------------------------------------------------

PREFIX(GraniteFirstColor,  tree, "granite_first_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return granite_first_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the first granite color.")
       DESCRIPTION("Set the first granite color."
                   "It corresponds to the main color of the granite."))

PREFIX(GraniteSecondColor,  tree, "granite_second_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return granite_second_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the second granite color.")
       DESCRIPTION("Set the second granite color."
                   "It corresponds to the color of the veining."))

PREFIX(GraniteThirdColor,  tree, "granite_third_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return granite_third_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the third granite color.")
       DESCRIPTION("Set the third granite color."
                   "It corresponds to the color of the marks."))

PREFIX(Granite,  tree, "granite_material",
       PARM(unit, integer, )
       PARM(scale, real, ),
       return granite(self, unit, scale),
       GROUP(module.Materials)
       SYNOPSIS("Apply a sort of granite material.")
       DESCRIPTION("Apply a sort of granite material."))

// ----------------------------------------------------------------------------
//   WOOD MATERIAL
// ----------------------------------------------------------------------------

PREFIX(WoodSFirstColor,  tree, "wood_first_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return wood_first_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the first wood color.")
       DESCRIPTION("Set the first wood color."
                   "It corresponds to the main color of the wood."))

PREFIX(WoodSecondColor,  tree, "wood_second_color",
       PARM(r, real, )
       PARM(g, real, )
       PARM(b, real, ),
       return wood_second_color(self, r, g, b),
       GROUP(module.Materials)
       SYNOPSIS("Set the second wood color.")
       DESCRIPTION("Set the second wood color."
                   "It corresponds to the main color of the grains."))

PREFIX(Wood,  tree, "wood_material",
       PARM(unit, integer, )
       PARM(scale, real, )
       PARM(ring, real, )
       PARM(noise, real, ),
       return wood(self, unit, scale, ring, noise),
       GROUP(module.Materials)
       SYNOPSIS("Apply a sort of wood material.")
       DESCRIPTION("Apply a sort of wood material."))

// ----------------------------------------------------------------------------
//   FRESNEL MATERIAL
// ----------------------------------------------------------------------------

PREFIX(Fresnel,  tree, "fresnel_material",
       PARM(unit, integer, )
       PARM(ratio, real, )
       PARM(IoR, real, )
       PARM(roughness, real, ),
       return fresnel_material(self, unit, ratio, IoR, roughness),
       GROUP(module.Materials)
       SYNOPSIS("Apply a material with fresnel reflections and refractions.")
       DESCRIPTION("Apply a material with fresnel reflections and refractions."))



